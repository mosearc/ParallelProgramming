#!/bin/bash
#PBS -N H1
#PBS -o ./H1.o
#PBS -e ./H1.e
#PBS -q short_cpuQ
#PBS -l walltime=01:00:00
#PBS -l select=1:ncpus=96:ompthreads=96:mem=4gb

# Modules for C
module load gcc91
module load python-3.7.2
gcc() {
    gcc-9.1.0 "$@"
}
gcc --version
# Select the working directory
cd /home/mose.arcaro/H1/64vs32vs16

touch output8.csv
echo "Threads,Dim,CheckSym,MatTranspose,Version" > output8.csv

for (( k = 4; k <= 4096; k=k*2 )); do

  gcc -o IMP8 IMP8.c
  for i in {1..5}
  do
    ./IMP8 "$k"
  done

done

python3 mean.py output8.csv

touch output16.csv
echo "Threads,Dim,CheckSym,MatTranspose,Version" > output16.csv

for (( k = 4; k <= 4096; k=k*2 )); do

  gcc -o IMP16 IMP16.c
  for i in {1..5}
  do
    ./IMP16 "$k"
  done

done

python3 mean.py output16.csv

touch output32.csv
echo "Threads,Dim,CheckSym,MatTranspose,Version" > output32.csv

for (( k = 4; k <= 4096; k=k*2 )); do

  gcc -o IMP32 IMP32.c
  for i in {1..5}
  do
    ./IMP32 "$k"
  done

done

python3 mean.py output32.csv

touch output64.csv
echo "Threads,Dim,CheckSym,MatTranspose,Version" > output64.csv

for (( k = 4; k <= 4096; k=k*2 )); do

  gcc -o IMP64 IMP64.c
  for i in {1..5}
  do
    ./IMP64 "$k"
  done

done

python3 mean.py output64.csv

cd ..
cd ImpAll

touch output_I_ALL.csv
echo "Threads,Dim,CheckSym,MatTranspose,Version" > output_I_ALL.csv

for (( k = 4; k <= 4096; k=k*2 )); do

  gcc -o SEQ SEQ.c
  for i in {1..5}
  do
    ./SEQ "$k"
  done

  gcc -O2 -floop-interchange -floop-unroll-and-jam -o IMP IMP.c
  for i in {1..5}
  do
    ./IMP "$k"
  done

done

python3 mean.py output_I_ALL.csv

cd ..
cd ImpOnlyFlags

touch outputOF.csv
echo "Threads,Dim,CheckSym,MatTranspose,Version" > outputOF.csv

for (( k = 4; k <= 4096; k=k*2 )); do

  gcc -o SEQ SEQ.c
  for i in {1..5}
  do
    ./SEQ "$k"
  done

  gcc -ftree-loop-distribution -floop-interchange -floop-unroll-and-jam -falign-loops -o IMP IMP.c
  for i in {1..5}
  do
    ./IMP "$k"
  done

done

python3 mean.py outputOF.csv

cd ..
cd ImpOnlyO2

touch outputOO2.csv
echo "Threads,Dim,CheckSym,MatTranspose,Version" > outputOO2.csv

for (( k = 4; k <= 4096; k=k*2 )); do

  gcc -o SEQ SEQ.c
  for i in {1..5}
  do
    ./SEQ "$k"
  done

  gcc -O2 -o IMP IMP.c
  for i in {1..5}
  do
    ./IMP "$k"
  done

done

python3 mean.py outputOO2.csv

cd ..
cd ImpPragmaO2

touch outputPO2.csv
echo "Threads,Dim,CheckSym,MatTranspose,Version" > outputPO2.csv

for (( k = 4; k <= 4096; k=k*2 )); do

  gcc -o SEQ SEQ.c
  for i in {1..5}
  do
    ./SEQ "$k"
  done

  gcc -O2 -o IMP IMP.c
  for i in {1..5}
  do
    ./IMP "$k"
  done

done

python3 mean.py outputPO2.csv

cd ..
cd OmpDynamic

touch outputOD.csv
echo "Threads,Dim,CheckSym,MatTranspose,Version" > outputOD.csv

for (( k = 4; k <= 4096; k=k*2 )); do

  gcc -o SEQ SEQ.c
  for i in {1..5}
  do
    ./SEQ "$k"
  done

  gcc -o OMP OMP.c -fopenmp
  for m in {1..96}
  do
    for i in {1..5}
    do
      export OMP_NUM_THREADS="$m"; ./OMP "$k" "$m"
    done
  done

done

python3 mean.py outputOD.csv
python3 SpeedupEff.py outputOD_processed.csv

cd ..
cd OmpStatic

touch outputOS.csv
echo "Threads,Dim,CheckSym,MatTranspose,Version" > outputOS.csv

for (( k = 4; k <= 4096; k=k*2 )); do

  gcc -o SEQ SEQ.c
  for i in {1..5}
  do
    ./SEQ "$k"
  done


  gcc -o OMP OMP.c -fopenmp
  for m in {1..96}
  do
    for i in {1..5}
    do
      export OMP_NUM_THREADS="$m"; ./OMP "$k" "$m"
    done
  done

done

python3 mean.py outputOS.csv
python3 SpeedupEff.py outputOS_processed.csv

cd ..
cd OmpNoBlocking

touch outputNB.csv
echo "Threads,Dim,CheckSym,MatTranspose,Version" > outputNB.csv

for (( k = 4; k <= 4096; k=k*2 )); do

  gcc -o SEQ SEQ.c
  for i in {1..5}
  do
    ./SEQ "$k"
  done


  gcc -o OMP OMP.c -fopenmp
  for m in {1..96}
  do
    for i in {1..5}
    do
      export OMP_NUM_THREADS="$m"; ./OMP "$k" "$m"
    done
  done

done

python3 mean.py outputNB.csv
python3 SpeedupEff.py outputNB_processed.csv











